{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\React\\\\boardproject-admin-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Login from \"./components/Login\";\nimport DashBoard from \"./components/DashBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nfunction App() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(false);\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem(\"userData\")));\n\n  // 이메일 입력 받아 상태에 세팅\n  const changeInputEmail = e => {\n    setEmail(e.target.value);\n  };\n\n  // 비밀번호 입력 받아 상태에 세팅\n  const changeInputPw = e => {\n    setPassword(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetch(\"/admin/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        memberEmail: email,\n        memberPw: password\n      })\n    }).then(res => res.json()).then(result => {\n      console.log(result);\n\n      // 저장할 데이터\n      const data = {\n        memberEmail: result.memberEmail,\n        memberNickname: result.memberNickname\n      };\n\n      // 현재 시간을 milliseconds로 구함\n      const currentTime = new Date().getTime();\n\n      // 1시간 후의 시간을 milliseconds로 구함\n      const expirationTime = currentTime + 60 * 60 * 1000; // 60분 * 60초 * 1000밀리초\n\n      // 데이터와 만료 시간을 localStorage에 저장\n      localStorage.setItem('userData', JSON.stringify(data));\n      localStorage.setItem('expirationTime', expirationTime);\n      setIsLogin(true);\n      setUser(data);\n\n      // 만료 시간을 확인하기 위해 타이머 설정\n      setTimeout(() => {\n        // 만료 시간이 지나면 localStorage에서 데이터 삭제\n        localStorage.removeItem('userData');\n        localStorage.removeItem('expirationTime');\n      }, 60 * 60 * 1000); // 1시간 후\n    });\n  };\n  const handleLogout = () => {\n    fetch(\"/admin/logout\").then(res => res.text()).then(result => {\n      if (result > 0) {\n        set;\n        localStorage.removeItem('userData');\n        localStorage.removeItem('expirationTime');\n      } else {\n        alert(\"로그아웃 중 문제 발생!\");\n      }\n    });\n  };\n\n  // user라는 객체에 상태와, 함수를 묶어서 \n  // Provider를 통해 하위 컴포넌트로 데이터 전달함\n  const globalState = {\n    user: user,\n    changeInputEmail: changeInputEmail,\n    changeInputPw: changeInputPw,\n    handleSubmit: handleSubmit,\n    handleLogout: handleLogout\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: globalState,\n      children: localStorage.getItem(\"userData\") != null ? /*#__PURE__*/_jsxDEV(DashBoard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XKY/AtPrir9bIEYrckpnbflLFJ0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Login","DashBoard","jsxDEV","_jsxDEV","UserContext","createContext","App","_s","email","setEmail","password","setPassword","isLogin","setIsLogin","user","setUser","JSON","parse","localStorage","getItem","changeInputEmail","e","target","value","changeInputPw","handleSubmit","preventDefault","fetch","method","headers","body","stringify","memberEmail","memberPw","then","res","json","result","console","log","data","memberNickname","currentTime","Date","getTime","expirationTime","setItem","setTimeout","removeItem","handleLogout","text","set","alert","globalState","children","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/workspace/React/boardproject-admin-react/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Login from \"./components/Login\";\nimport DashBoard from \"./components/DashBoard\";\n\nexport const UserContext = React.createContext();\n\nfunction App() {\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(false);\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem(\"userData\")));\n\n  // 이메일 입력 받아 상태에 세팅\n  const changeInputEmail = (e) => {\n    setEmail(e.target.value);\n  }\n  \n  // 비밀번호 입력 받아 상태에 세팅\n  const changeInputPw = (e) => {\n    setPassword(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    fetch(\"/admin/login\", {\n      method : \"POST\",\n      headers : {\"Content-Type\" : \"application/json\"},\n      body : JSON.stringify({\n        memberEmail : email, \n        memberPw : password\n      })\n    })\n    .then(res => res.json())\n    .then(result => {\n      console.log(result);\n\n      // 저장할 데이터\n      const data = {\n        memberEmail: result.memberEmail,\n        memberNickname: result.memberNickname\n      };\n\n      // 현재 시간을 milliseconds로 구함\n      const currentTime = new Date().getTime();\n\n      // 1시간 후의 시간을 milliseconds로 구함\n      const expirationTime = currentTime + 60 * 60 * 1000; // 60분 * 60초 * 1000밀리초\n\n      // 데이터와 만료 시간을 localStorage에 저장\n      localStorage.setItem('userData', JSON.stringify(data));\n      localStorage.setItem('expirationTime', expirationTime);\n\n      setIsLogin(true);\n      setUser(data);\n\n      // 만료 시간을 확인하기 위해 타이머 설정\n      setTimeout(() => {\n        // 만료 시간이 지나면 localStorage에서 데이터 삭제\n        localStorage.removeItem('userData');\n        localStorage.removeItem('expirationTime');\n      }, 60 * 60 * 1000); // 1시간 후\n      \n            \n    });\n  }\n\n  const handleLogout = () => {\n\n    fetch(\"/admin/logout\")\n    .then(res => res.text())\n    .then(result => {\n\n      if(result > 0) {\n        set\n        localStorage.removeItem('userData');\n        localStorage.removeItem('expirationTime');\n      } else {\n        alert(\"로그아웃 중 문제 발생!\");\n      }\n    })\n  }\n\n\n  // user라는 객체에 상태와, 함수를 묶어서 \n  // Provider를 통해 하위 컴포넌트로 데이터 전달함\n  const globalState = {\n    user : user,\n    changeInputEmail : changeInputEmail,\n    changeInputPw : changeInputPw,\n    handleSubmit : handleSubmit,\n    handleLogout : handleLogout\n  }\n  \n  return (\n    <div>\n      <UserContext.Provider value={globalState}>\n        {\n          localStorage.getItem(\"userData\") != null ?\n            <DashBoard />\n            :\n            <Login />\n          }\n      </UserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}