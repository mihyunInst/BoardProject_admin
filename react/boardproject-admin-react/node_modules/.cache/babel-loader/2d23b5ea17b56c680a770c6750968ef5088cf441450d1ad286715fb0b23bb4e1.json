{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\React\\\\boardproject-admin-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Login from \"./components/Login\";\nimport DashBoard from \"./components/DashBoard\";\nimport './css/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nfunction App() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem(\"userData\")));\n\n  // 이메일 입력 받아 상태에 세팅\n  const changeInputEmail = e => {\n    setEmail(e.target.value);\n  };\n\n  // 비밀번호 입력 받아 상태에 세팅\n  const changeInputPw = e => {\n    setPassword(e.target.value);\n  };\n\n  // 로그인 시 비동기 요청 함수\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetch(\"/admin/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        memberEmail: email,\n        memberPw: password\n      })\n    }).then(res => res.text()).then(result => {\n      if (result.length == 0) {\n        alert(\"이메일 혹은 비밀번호 불일치!\");\n        return;\n      } else {\n        // 저장할 데이터\n        result = JSON.parse(result);\n        const data = {\n          memberEmail: result.memberEmail,\n          memberNickname: result.memberNickname\n        };\n\n        // 현재 시간을 milliseconds로 구함\n        const currentTime = new Date().getTime();\n\n        // 1시간 후의 시간을 milliseconds로 구함\n        const expirationTime = currentTime + 60 * 60 * 1000; // 60분 * 60초 * 1000밀리초\n\n        // 데이터와 만료 시간을 localStorage에 저장\n        localStorage.setItem('userData', JSON.stringify(data));\n        localStorage.setItem('expirationTime', expirationTime);\n\n        // 상태에 얻어온 loginMember의 데이터 세팅\n        setUser(data);\n\n        // 만료 시간을 확인하기 위해 타이머 설정\n        setTimeout(() => {\n          // 만료 시간이 지나면 localStorage에서 데이터 삭제\n          localStorage.removeItem('userData');\n          localStorage.removeItem('expirationTime');\n        }, 60 * 60 * 1000); // 1시간 후\n      }\n    });\n  };\n\n  // 로그아웃 시 비동기 요청 함수\n  const handleLogout = () => {\n    fetch(\"/admin/logout\").then(res => res.text()).then(result => {\n      if (result > 0) {\n        setUser(null);\n        localStorage.removeItem('userData');\n        localStorage.removeItem('expirationTime');\n      } else {\n        alert(\"로그아웃 중 문제 발생!\");\n      }\n    });\n  };\n\n  // user라는 객체에 상태와, 함수를 묶어서 \n  // Provider를 통해 하위 컴포넌트로 데이터 전달함\n  const globalState = {\n    user: user,\n    changeInputEmail: changeInputEmail,\n    changeInputPw: changeInputPw,\n    handleSubmit: handleSubmit,\n    handleLogout: handleLogout\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body-container\",\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: globalState,\n      children: localStorage.getItem(\"userData\") != null ? /*#__PURE__*/_jsxDEV(DashBoard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"di1kyQKWIIBCNq+7UQlEzF1xxxE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Login","DashBoard","jsxDEV","_jsxDEV","UserContext","createContext","App","_s","email","setEmail","password","setPassword","user","setUser","JSON","parse","localStorage","getItem","changeInputEmail","e","target","value","changeInputPw","handleSubmit","preventDefault","fetch","method","headers","body","stringify","memberEmail","memberPw","then","res","text","result","length","alert","data","memberNickname","currentTime","Date","getTime","expirationTime","setItem","setTimeout","removeItem","handleLogout","globalState","className","children","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/workspace/React/boardproject-admin-react/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Login from \"./components/Login\";\nimport DashBoard from \"./components/DashBoard\";\nimport './css/App.css';\n\nexport const UserContext = React.createContext();\n\nfunction App() {\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem(\"userData\")));\n\n  // 이메일 입력 받아 상태에 세팅\n  const changeInputEmail = (e) => {\n    setEmail(e.target.value);\n  }\n  \n  // 비밀번호 입력 받아 상태에 세팅\n  const changeInputPw = (e) => {\n    setPassword(e.target.value);\n  }\n\n  // 로그인 시 비동기 요청 함수\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    fetch(\"/admin/login\", {\n      method : \"POST\",\n      headers : {\"Content-Type\" : \"application/json\"},\n      body : JSON.stringify({\n        memberEmail : email, \n        memberPw : password\n      })\n    })\n    .then(res => res.text())\n    .then(result => {\n\n      if(result.length == 0) {\n        alert(\"이메일 혹은 비밀번호 불일치!\");\n        return;\n\n      } else {\n        \n        // 저장할 데이터\n        result = JSON.parse(result);\n        \n        const data = {\n          memberEmail: result.memberEmail,\n          memberNickname: result.memberNickname\n        };\n\n        // 현재 시간을 milliseconds로 구함\n        const currentTime = new Date().getTime();\n\n        // 1시간 후의 시간을 milliseconds로 구함\n        const expirationTime = currentTime + 60 * 60 * 1000; // 60분 * 60초 * 1000밀리초\n\n        // 데이터와 만료 시간을 localStorage에 저장\n        localStorage.setItem('userData', JSON.stringify(data));\n        localStorage.setItem('expirationTime', expirationTime);\n\n        // 상태에 얻어온 loginMember의 데이터 세팅\n        setUser(data);\n\n        // 만료 시간을 확인하기 위해 타이머 설정\n        setTimeout(() => {\n          // 만료 시간이 지나면 localStorage에서 데이터 삭제\n          localStorage.removeItem('userData');\n          localStorage.removeItem('expirationTime');\n        }, 60 * 60 * 1000); // 1시간 후\n        \n      }\n\n    })\n  }\n\n  // 로그아웃 시 비동기 요청 함수\n  const handleLogout = () => {\n\n    fetch(\"/admin/logout\")\n    .then(res => res.text())\n    .then(result => {\n\n      if(result > 0) {\n        setUser(null);\n        localStorage.removeItem('userData');\n        localStorage.removeItem('expirationTime');\n      } else {\n        alert(\"로그아웃 중 문제 발생!\");\n      }\n    })\n  }\n\n  // user라는 객체에 상태와, 함수를 묶어서 \n  // Provider를 통해 하위 컴포넌트로 데이터 전달함\n  const globalState = {\n    user : user,\n    changeInputEmail : changeInputEmail,\n    changeInputPw : changeInputPw,\n    handleSubmit : handleSubmit,\n    handleLogout : handleLogout\n  }\n  \n  return (\n    <div className=\"body-container\">\n      <UserContext.Provider value={globalState}>\n        {\n          localStorage.getItem(\"userData\") != null ?\n            <DashBoard />\n            :\n            <Login />\n          }\n      </UserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}